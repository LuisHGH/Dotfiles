#+TITLE: LuisHGH's Doom Emacs Config
#+AUTHOR: Luis Henrique Gomes Higino
#+STARTUP: showeverything

* About This Config
This is my personal Doom Emacs literate config. Note: it was heavily inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org][Derek Taylor's]]. You can take some elisp from this file and paste it into =$DOOMDIR/config.el= if you're using a normal config. In case you're wondering how can you use a literate config, just uncomment the ~literate~ section in the bottom of your =$DOOMDIR/init.el= and create a =$DOOMDIR/config.org= file. For more details about the ~literate~ module, check its documentation inside your Doom Emacs instalation. Remember, you do not need to run ~doom sync~ after modifying neither =config.el= or =config.org=!
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
** Some additional functions/macros that could help you configure Doom:
- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to this file. Emacs searches the =load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used. You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
* Identification
Some functionality uses this settings to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src elisp
(setq user-full-name "Luis Henrique Gomes Higino"
      user-mail-address "luishenriquegh2701@gmail.com")
#+end_src
* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. Here are the three important ones:
+ ~doom-font~ - standart monospace font.
+ ~doom-variable-pitch-font~ - variable font which is used by some Emacs plugins (such as eww).
+ ~doom-big-font~ - used in ~doom-big-font-mode~, useful for presentations or streaming.
#+begin_src elisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
#+end_src
You can also enable bold and italic:
#+begin_src elisp
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src
And you can set custom faces for specific types of words and sections, such as keywords or comments:
#+begin_src elisp
(custom-set-faces!
  '(font-lock-keyword-face :slant italic))
#+end_src
* Doom Theme
This sets the Doom Emacs theme (or colorscheme). To try out new themes, use ~SPC h t~.
#+begin_src elisp
(setq doom-theme 'doom-dracula) ;; << This line enables the doom-dracula theme
#+end_src
* Org Mode
~org-mode~ related settings. Wrapped in =(after! org)= to avoid being overwritten by Doom's defaults.
#+begin_src elisp
(after! org
  (setq org-directory "~/Documents/org/")
  (setq org-agenda-files '("~/Documents/org/agenda.org"))
  (setq org-log-done 'time)
  )
#+end_src
Snippet taken from DT's config:
#+begin_quote
I was tired of having to run org-babel-tangle after saving my literate dotfiles.  So the following function runs org-babel-tangle upon saving any org-mode buffer.  This is asynchronous meaning that it dispatches the tangle function to a subprocess, so that the main Emacs is not blocked while it runs. -- Derek Taylor
#+end_quote
#+begin_src elisp
(defun dt/org-babel-tangle-async (file)
  "Invoke `org-babel-tangle-file' asynchronously."
  (message "Tangling %s..." (buffer-file-name))
  (async-start
   (let ((args (list file)))
     `(lambda ()
        (require 'org)
        ;;(load "~/.emacs.d/init.el")
        (let ((start-time (current-time)))
          (apply #'org-babel-tangle-file ',args)
          (format "%.2f" (float-time (time-since start-time))))))
   (let ((message-string (format "Tangling %S completed after " file)))
     `(lambda (tangle-time)
        (message (concat ,message-string
                         (format "%s seconds" tangle-time)))))))

(defun dt/org-babel-tangle-current-buffer-async ()
  "Tangle current buffer asynchronously."
  (dt/org-babel-tangle-async (buffer-file-name)))
#+end_src
* Line Settings
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
* Programming settings
These are more personal configs related to my programming workflows.
** Use ESLint for checking typescript files
#+begin_src elisp
(defun typescript-mode-setup ()
  "Custom setup for Typescript mode"
  (setq flycheck-checker 'javascript-eslint)
  )
(add-hook 'typescript-mode-hook 'typescript-mode-setup)
#+end_src
** TODO Use platformio-mode for checking .ino files (doesn't work)
This was a failed attempt of trying to make platformio mode support .ino files. I'll mantain this as a comment because I want to get it to work someday.
#+begin_src elisp
;;(defun arduino-mode-setup()
;;  (setq flycheck-checker 'platformio-mode)
;;  )
;;(add-hook 'arduino-mode-hook 'arduino-mode-setup)
#+end_src
** Flutter Settings
#+begin_src elisp
(setq flutter-sdk-path "/home/luishgh/flutter")
#+end_src
